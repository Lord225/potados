{
    "CPU": {
        "Name": "PotaDOS",
        "Arch": "POTDOS",
        "Author": "Gwiezdny Kartofel - Lord225",
        "emulator": "potados_emulator",
        "time_per_cycle": 3.3,
        "ARGUMENTS": {
            "variants": {
                "const16": {
                    "pdec": {
                        "size": 2
                    },
                    "const": {
                        "size": 16
                    },
                    "dst": {
                        "size": 4
                    }
                },
                "branch": {
                    "pridec": {
                        "size": 2
                    },
                    "secdec": {
                        "size": 3
                    },
                    "r2": {
                        "size": 4
                    },
                    "pad": {
                        "size": 1
                    },
                    "offset": {
                        "size": 8
                    },
                    "r1": {
                        "size": 4
                    }
                },
                "aluimm": {
                    "pridec": {
                        "size": 2
                    },
                    "secdec": {
                        "size": 3
                    },
                    "r2": {
                        "size": 4
                    },
                    "I": {
                        "size": 1
                    },
                    "R1": {
                        "size": 8
                    },
                    "dst": {
                        "size": 4
                    }
                },
                "alufpu": {
                    "pridec": {
                        "size": 2
                    },
                    "secdec": {
                        "size": 3
                    },
                    "r2": {
                        "size": 4
                    },
                    "flags": {
                        "size": 5
                    },
                    "r1": {
                        "size": 4
                    },
                    "dst": {
                        "size": 4
                    }
                },
                "indirectlsh": {
                    "pridec": {
                        "size": 2
                    },
                    "secdec": {
                        "size": 3
                    },
                    "ptr": {
                        "size": 4
                    },
                    "3th": {
                        "size": 3
                    },
                    "lsh": {
                        "size": 2
                    },
                    "offset": {
                        "size": 4
                    },
                    "srcdst": {
                        "size": 4
                    }
                },
                "indirect": {
                    "pridec": {
                        "size": 2
                    },
                    "secdec": {
                        "size": 3
                    },
                    "ptr": {
                        "size": 4
                    },
                    "3th": {
                        "size": 3
                    },
                    "offset": {
                        "size": 6
                    },
                    "srcdst": {
                        "size": 4
                    }
                },
                "other": {
                    "pridec": {
                        "size": 2
                    },
                    "secdec": {
                        "size": 3
                    },
                    "src": {
                        "size": 4
                    },
                    "3th": {
                        "size": 5
                    },
                    "r1": {
                        "size": 4
                    },
                    "dst": {
                        "size": 4
                    }
                },
                "inject": {
                    "value": {
                        "size": 22
                    }
                }
            }
        },
        "ADRESSING": {
            "mode": "align",
            "bin_len": 22,
            "offset": 0
        },
        "DEFINES": [
            "__POTDOS__",
            [
                "SP",
                "15"
            ],
            [
                "PC",
                "7"
            ],
            [
                "PT",
                "1"
            ],
            [
                "FL",
                "8"
            ]
        ],
        "KEYWORDS": {
            "CORE0": {
                "offset": 0,
                "write": 0
            }
        },
        "FILL": "nop",
        "COMMANDS": {
            "nop": {
                "pattern": "nop",
                "command_layout": "const16",
                "bin": {
                    "pdec": 0,
                    "const": 0,
                    "dst": 0
                }
            },
            "load imm": {
                "pattern": "mov reg[{dst:num}], {val:num}",
                "command_layout": "const16",
                "bin": {
                    "pdec": 0,
                    "const": "val",
                    "dst": "dst"
                }
            },
            "jmp": {
                "pattern": "jmp {label:label}",
                "command_layout": "const16",
                "bin": {
                    "pdec": 0,
                    "const": "label",
                    "dst": 7
                }
            },
            "mov": {
                "pattern": "mov reg[{dst:num}], {label:label}",
                "command_layout": "const16",
                "bin": {
                    "pdec": 0,
                    "const": "label",
                    "dst": "dst"
                }
            },
            "copy": {
                "pattern": "mov reg[{dst:num}], reg[{src:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "src",
                    "flags": 0,
                    "4th": 3,
                    "r1": 0,
                    "dst": "dst"
                }
            },
            "call": {
                "pattern": "call {label:label}",
                "command_layout": "const16",
                "bin": {
                    "pdec": 3,
                    "const": "label",
                    "dst": 7
                }
            },
            "ret": {
                "pattern": "ret",
                "command_layout": "other",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "src": 0,
                    "3th": 5,
                    "4th": 0,
                    "pad": 0,
                    "dst": 7
                }
            },
            "branch jge imm": {
                "pattern": "jge reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 0,
                    "r2": "arg1",
                    "offset": "offset",
                    "r1": "arg2"
                }
            },
            "branch jl imm": {
                "pattern": "jl reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 1,
                    "r2": "arg1",
                    "offset": "offset",
                    "r1": "arg2"
                }
            },
            "branch je ": {
                "pattern": "je reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 2,
                    "r2": "arg2",
                    "offset": "offset",
                    "r1": "arg1"
                }
            },
            "branch jne ": {
                "pattern": "jne reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 3,
                    "r2": "arg2",
                    "offset": "offset",
                    "r1": "arg1"
                }
            },
            "branch jae ": {
                "pattern": "jae reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 4,
                    "r2": "arg2",
                    "offset": "offset",
                    "r1": "arg1"
                }
            },
            "branch jb ": {
                "pattern": "jb reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 5,
                    "r2": "arg2",
                    "offset": "offset",
                    "r1": "arg1"
                }
            },
            "branch jg ": {
                "pattern": "jg reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 1,
                    "r2": "arg2",
                    "offset": "offset",
                    "r1": "arg1"
                }
            },
            "branch ja imm": {
                "pattern": "ja reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 5,
                    "r2": "arg1",
                    "offset": "offset",
                    "r1": "arg2"
                }
            },
            "branch jle ": {
                "pattern": "jle reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 0,
                    "r2": "arg2",
                    "offset": "offset",
                    "r1": "arg1"
                }
            },
            "branch jbe imm": {
                "pattern": "jbe reg[{arg1:num}], reg[{arg2:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 4,
                    "r2": "arg1",
                    "offset": "offset",
                    "r1": "arg2"
                }
            },
            "branch jge ++": {
                "pattern": "jge reg[1]++, reg[{reg:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 6,
                    "r2": "reg",
                    "offset": "offset",
                    "r1": 2
                }
            },
            "branch jge --": {
                "pattern": "jge reg[1]--, reg[{reg:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 6,
                    "r2": "reg",
                    "offset": "offset",
                    "r1": 1
                }
            },
            "branch jne ++": {
                "pattern": "jne reg[1]++, reg[{reg:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 7,
                    "r2": "reg",
                    "offset": "offset",
                    "r1": 2
                }
            },
            "branch jne --": {
                "pattern": "jne reg[1]--, reg[{reg:num}], {offset:offset_label}",
                "command_layout": "branch",
                "bin": {
                    "pridec": 2,
                    "secdec": 7,
                    "r2": "reg",
                    "offset": "offset",
                    "r1": 1
                }
            },
            "add": {
                "pattern": "add reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 1,
                    "r2": "arg1",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "add const": {
                "pattern": "add reg[{dst:num}], reg[{arg1:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 1,
                    "r2": "arg1",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "shortcut add": {
                "pattern": "add reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 1,
                    "r2": "dst",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "shortcut add const": {
                "pattern": "add reg[{dst:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 1,
                    "r2": "dst",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "sub": {
                "pattern": "sub reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 2,
                    "r2": "arg1",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "sub const": {
                "pattern": "sub reg[{dst:num}], reg[{arg1:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 2,
                    "r2": "arg1",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "shortcut sub": {
                "pattern": "sub reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 2,
                    "r2": "dst",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "shortcut sub const": {
                "pattern": "sub reg[{dst:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 2,
                    "r2": "dst",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "arsh": {
                "pattern": "arsh reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 4,
                    "r2": "arg1",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "arsh const": {
                "pattern": "arsh reg[{dst:num}], reg[{arg1:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 4,
                    "r2": "arg1",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "shortcut arsh": {
                "pattern": "arsh reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 4,
                    "r2": "dst",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "shortcut arsh const": {
                "pattern": "arsh reg[{dst:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 4,
                    "r2": "dst",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "rsh": {
                "pattern": "rsh reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 5,
                    "r2": "arg1",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "rsh const": {
                "pattern": "rsh reg[{dst:num}], reg[{arg1:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 5,
                    "r2": "arg1",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "shortcut rsh": {
                "pattern": "rsh reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 5,
                    "r2": "dst",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "shortcut rsh const": {
                "pattern": "rsh reg[{dst:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 5,
                    "r2": "dst",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "lsh": {
                "pattern": "lsh reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 6,
                    "r2": "arg1",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "lsh const": {
                "pattern": "lsh reg[{dst:num}], reg[{arg1:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 6,
                    "r2": "arg1",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "shortcut lsh": {
                "pattern": "lsh reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 6,
                    "r2": "dst",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "shortcut lsh const": {
                "pattern": "lsh reg[{dst:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 6,
                    "r2": "dst",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "mul": {
                "pattern": "mul reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 7,
                    "r2": "arg1",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "mul const": {
                "pattern": "mul reg[{dst:num}], reg[{arg1:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 7,
                    "r2": "arg1",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "shortcut mul": {
                "pattern": "mul reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 7,
                    "r2": "dst",
                    "I": 0,
                    "R1": "arg2 if arg2 < 16 else None",
                    "dst": "dst"
                }
            },
            "shortcut mul const": {
                "pattern": "mul reg[{dst:num}], {const:num}",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 7,
                    "r2": "dst",
                    "I": 1,
                    "R1": "const",
                    "dst": "dst"
                }
            },
            "xor": {
                "pattern": "xor reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "arg1",
                    "flags": 8,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut xor": {
                "pattern": "xor reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "dst",
                    "flags": 8,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "and": {
                "pattern": "and reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "arg1",
                    "flags": 7,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut and": {
                "pattern": "and reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "dst",
                    "flags": 7,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "or": {
                "pattern": "or reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "arg1",
                    "flags": 0,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut or": {
                "pattern": "or reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "dst",
                    "flags": 0,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "fadd": {
                "pattern": "fadd reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 1,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut fadd": {
                "pattern": "fadd reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 1,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "fsub": {
                "pattern": "fsub reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 2,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut fsub": {
                "pattern": "fsub reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 2,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "fmul": {
                "pattern": "fmul reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 3,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut fmul": {
                "pattern": "fmul reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 3,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "fdiv": {
                "pattern": "fdiv reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 4,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut fdiv": {
                "pattern": "fdiv reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 4,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "ftoi": {
                "pattern": "ftoi reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 5,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut ftoi": {
                "pattern": "ftoi reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 5,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "itof": {
                "pattern": "itof reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 6,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut itof": {
                "pattern": "itof reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 6,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "utof": {
                "pattern": "utof reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "arg1",
                    "flags": 7,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut utof": {
                "pattern": "utof reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "r2": "dst",
                    "flags": 7,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "xnor": {
                "pattern": "xnor reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "arg1",
                    "flags": 1,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut xnor": {
                "pattern": "xnor reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "dst",
                    "flags": 1,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "nand": {
                "pattern": "nand reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "arg1",
                    "flags": 14,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut nand": {
                "pattern": "nand reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "dst",
                    "flags": 14,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "nor": {
                "pattern": "nor reg[{dst:num}], reg[{arg1:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "arg1",
                    "flags": 9,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "shortcut nor": {
                "pattern": "nor reg[{dst:num}], reg[{arg2:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": "dst",
                    "flags": 9,
                    "r1": "arg2",
                    "dst": "dst"
                }
            },
            "load ptr lsh": {
                "pattern": "mov reg[{dst:num}], ram[reg[{ptr:num}] + {lsh:num}*reg[8] + {offset:num}]",
                "command_layout": "indirectlsh",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": "ptr",
                    "3th": 6,
                    "lsh": "{1:0, 2:1, 4:2, 8:3}[lsh] if lsh in [1, 2, 4, 8] else None",
                    "offset": "offset",
                    "srcdst": "dst"
                }
            },
            "load ptr imm": {
                "pattern": "mov reg[{dst:num}], ram[reg[{ptr:num}] + {offset:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": "ptr",
                    "3th": 7,
                    "offset": "offset",
                    "srcdst": "dst"
                }
            },
            "store ptr lsh": {
                "pattern": "mov ram[reg[{ptr:num}] + {lsh:num}*reg[8] + {offset:num}], reg[{dst:num}]",
                "command_layout": "indirectlsh",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": "ptr",
                    "3th": 4,
                    "lsh": "{1:0, 2:1, 4:2, 8:3}[lsh] if lsh in [1, 2, 4, 8] else None",
                    "offset": "offset",
                    "srcdst": "dst"
                }
            },
            "store ptr imm": {
                "pattern": "mov ram[reg[{ptr:num}] + {offset:num}], reg[{dst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": "ptr",
                    "3th": 5,
                    "offset": "offset",
                    "srcdst": "dst"
                }
            },
            "pop": {
                "pattern": "pop reg[{dst:num}]",
                "command_layout": "other",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "src": 0,
                    "3th": 9,
                    "r1": 0,
                    "dst": "dst"
                }
            },
            "push": {
                "pattern": "push reg[{src:num}]",
                "command_layout": "other",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "src": "src",
                    "3th": 10,
                    "r1": 0,
                    "dst": 0
                }
            },
            "int": {
                "pattern": "int {type:num}",
                "command_layout": "other",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "src": 0,
                    "3th": 11,
                    "r1": 0,
                    "dst": "type"
                }
            },
            "not": {
                "pattern": "not reg[{dst:num}], reg[{src:num}]",
                "command_layout": "alufpu",
                "bin": {
                    "pridec": 1,
                    "secdec": 3,
                    "r2": 0,
                    "flags": 1,
                    "4th": 1,
                    "r1": "src",
                    "dst": "dst"
                }
            },
            "inject": {
                "pattern": "inject {value:num}",
                "command_layout": "inject",
                "bin": {
                    "value": "value"
                }
            },
            "inc": {
                "pattern": "inc reg[{target:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 1,
                    "r2": "target",
                    "I": 1,
                    "R1": 1,
                    "dst": "target"
                }
            },
            "dec": {
                "pattern": "dec reg[{target:num}]",
                "command_layout": "aluimm",
                "bin": {
                    "pridec": 1,
                    "secdec": 2,
                    "r2": "target",
                    "I": 1,
                    "R1": 1,
                    "dst": "target"
                }
            },
            "print": {
                "pattern": "print reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 4,
                    "offset": 5,
                    "srcdst": "srcdst"
                }
            },
            "dbg": {
                "pattern": "dbg reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 4,
                    "offset": 6,
                    "srcdst": "srcdst"
                }
            },
            "clk set": {
                "pattern": "clk set reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 4,
                    "offset": 1,
                    "srcdst": "srcdst"
                }
            },
            "clk get": {
                "pattern": "clk get reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 2,
                    "offset": 1,
                    "srcdst": "srcdst"
                }
            },
            "tim set": {
                "pattern": "tim set reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 4,
                    "offset": 2,
                    "srcdst": "srcdst"
                }
            },
            "tim get": {
                "pattern": "tim get reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 2,
                    "offset": 2,
                    "srcdst": "srcdst"
                }
            },
            "tim state set": {
                "pattern": "tim state set reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 4,
                    "offset": 3,
                    "srcdst": "srcdst"
                }
            },
            "tim state get": {
                "pattern": "tim state get reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 2,
                    "offset": 3,
                    "srcdst": "srcdst"
                }
            },
            "gpu status": {
                "pattern": "gpu status reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 4,
                    "offset": 12,
                    "srcdst": "srcdst"
                }
            },
            "gpu invoke": {
                "pattern": "gpu invoke reg[{srcdst:num}]",
                "command_layout": "indirect",
                "bin": {
                    "pridec": 1,
                    "secdec": 0,
                    "ptr": 0,
                    "3th": 2,
                    "offset": 13,
                    "srcdst": "srcdst"
                }
            }
        },
        "MACROS": {
            "load imm macro 1": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}]]",
                "process": {
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 2": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}]]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 3": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 4": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 5": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 6": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + {offset:token} + 0*reg[8]]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 7": {
                "pattern": "mov reg[{dst:token}], ram[0*reg[8] + reg[{ptr:token}] + {offset:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 8": {
                "pattern": "mov reg[{dst:token}], ram[0*reg[8] + {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 9": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}] + 0*reg[8]]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 10": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + 0*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load lsh macro 11": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + {offset:token} + 1*reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 12": {
                "pattern": "mov reg[{dst:token}], ram[1*reg[8] + reg[{ptr:token}] + {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 13": {
                "pattern": "mov reg[{dst:token}], ram[1*reg[8] + {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 14": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}] + 1*reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 15": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + 1*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 16": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + {offset:token} + 2*reg[8]]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 17": {
                "pattern": "mov reg[{dst:token}], ram[2*reg[8] + reg[{ptr:token}] + {offset:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 18": {
                "pattern": "mov reg[{dst:token}], ram[2*reg[8] + {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 19": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}] + 2*reg[8]]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 20": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + 2*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 21": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + {offset:token} + 4*reg[8]]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 22": {
                "pattern": "mov reg[{dst:token}], ram[4*reg[8] + reg[{ptr:token}] + {offset:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 23": {
                "pattern": "mov reg[{dst:token}], ram[4*reg[8] + {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 24": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}] + 4*reg[8]]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 25": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + 4*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 26": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + {offset:token} + 8*reg[8]]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 27": {
                "pattern": "mov reg[{dst:token}], ram[8*reg[8] + reg[{ptr:token}] + {offset:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 28": {
                "pattern": "mov reg[{dst:token}], ram[8*reg[8] + {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 29": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}] + 8*reg[8]]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 30": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + 8*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 31": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + reg[8] + {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 32": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + {offset:token} + reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 33": {
                "pattern": "mov reg[{dst:token}], ram[reg[8] + reg[{ptr:token}] + {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 34": {
                "pattern": "mov reg[{dst:token}], ram[reg[8] + {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 35": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[{ptr:token}] + reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 36": {
                "pattern": "mov reg[{dst:token}], ram[{offset:token} + reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load imm macro 37": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + 0*reg[8]]",
                "process": {
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 38": {
                "pattern": "mov reg[{dst:token}], ram[0*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load lsh macro 39": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + 1*reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 40": {
                "pattern": "mov reg[{dst:token}], ram[1*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 41": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + 2*reg[8]]",
                "process": {
                    "lsh": "2",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 42": {
                "pattern": "mov reg[{dst:token}], ram[2*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "2",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 43": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + 4*reg[8]]",
                "process": {
                    "lsh": "4",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 44": {
                "pattern": "mov reg[{dst:token}], ram[4*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "4",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 45": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + 8*reg[8]]",
                "process": {
                    "lsh": "8",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 46": {
                "pattern": "mov reg[{dst:token}], ram[8*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "8",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 47": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}] + reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 48": {
                "pattern": "mov reg[{dst:token}], ram[reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load imm macro 49": {
                "pattern": "mov reg[{dst:token}], ram[0*reg[8]]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 50": {
                "pattern": "mov reg[{dst:token}], ram[1*reg[8]]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 51": {
                "pattern": "mov reg[{dst:token}], ram[2*reg[8]]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 52": {
                "pattern": "mov reg[{dst:token}], ram[4*reg[8]]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 53": {
                "pattern": "mov reg[{dst:token}], ram[8*reg[8]]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 54": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] + 0*reg[8] - {offset:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 55": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] - {offset:token} + 0*reg[8]]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 56": {
                "pattern": "mov reg[{dst:token}], ram[ 0*reg[8] + reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 57": {
                "pattern": "mov reg[{dst:token}], ram[ 0*reg[8] - {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 58": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}] + 0*reg[8]]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load imm macro 59": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + 0*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            },
            "load lsh macro 60": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] + 1*reg[8] - {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 61": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] - {offset:token} + 1*reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 62": {
                "pattern": "mov reg[{dst:token}], ram[ 1*reg[8] + reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 63": {
                "pattern": "mov reg[{dst:token}], ram[ 1*reg[8] - {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 64": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}] + 1*reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 65": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + 1*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 66": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] + 2*reg[8] - {offset:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 67": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] - {offset:token} + 2*reg[8]]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 68": {
                "pattern": "mov reg[{dst:token}], ram[ 2*reg[8] + reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 69": {
                "pattern": "mov reg[{dst:token}], ram[ 2*reg[8] - {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 70": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}] + 2*reg[8]]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 71": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + 2*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 72": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] + 4*reg[8] - {offset:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 73": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] - {offset:token} + 4*reg[8]]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 74": {
                "pattern": "mov reg[{dst:token}], ram[ 4*reg[8] + reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 75": {
                "pattern": "mov reg[{dst:token}], ram[ 4*reg[8] - {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 76": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}] + 4*reg[8]]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 77": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + 4*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 78": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] + 8*reg[8] - {offset:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 79": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] - {offset:token} + 8*reg[8]]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 80": {
                "pattern": "mov reg[{dst:token}], ram[ 8*reg[8] + reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 81": {
                "pattern": "mov reg[{dst:token}], ram[ 8*reg[8] - {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 82": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}] + 8*reg[8]]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 83": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + 8*reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 84": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] + reg[8] - {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 85": {
                "pattern": "mov reg[{dst:token}], ram[ reg[{ptr:token}] - {offset:token} + reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 86": {
                "pattern": "mov reg[{dst:token}], ram[ reg[8] + reg[{ptr:token}] - {offset:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 87": {
                "pattern": "mov reg[{dst:token}], ram[ reg[8] - {offset:token} + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 88": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[{ptr:token}] + reg[8]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load lsh macro 89": {
                "pattern": "mov reg[{dst:token}], ram[- {offset:token} + reg[8] + reg[{ptr:token}]]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {lsh}*reg[8] + {offset}]"
                ]
            },
            "load imm macro 90": {
                "pattern": "mov ram[reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 91": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 92": {
                "pattern": "mov ram[{offset:token}], reg[{dst:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 93": {
                "pattern": "mov ram[reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 94": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 95": {
                "pattern": "mov ram[reg[{ptr:token}] + {offset:token} + 0*reg[8]], reg[{dst:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 96": {
                "pattern": "mov ram[0*reg[8] + reg[{ptr:token}] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 97": {
                "pattern": "mov ram[0*reg[8] + {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 98": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}] + 0*reg[8]], reg[{dst:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 99": {
                "pattern": "mov ram[{offset:token} + 0*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 100": {
                "pattern": "mov ram[reg[{ptr:token}] + {offset:token} + 1*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 101": {
                "pattern": "mov ram[1*reg[8] + reg[{ptr:token}] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 102": {
                "pattern": "mov ram[1*reg[8] + {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 103": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}] + 1*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 104": {
                "pattern": "mov ram[{offset:token} + 1*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 105": {
                "pattern": "mov ram[reg[{ptr:token}] + {offset:token} + 2*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 106": {
                "pattern": "mov ram[2*reg[8] + reg[{ptr:token}] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 107": {
                "pattern": "mov ram[2*reg[8] + {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 108": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}] + 2*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 109": {
                "pattern": "mov ram[{offset:token} + 2*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 110": {
                "pattern": "mov ram[reg[{ptr:token}] + {offset:token} + 4*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 111": {
                "pattern": "mov ram[4*reg[8] + reg[{ptr:token}] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 112": {
                "pattern": "mov ram[4*reg[8] + {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 113": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}] + 4*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 114": {
                "pattern": "mov ram[{offset:token} + 4*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 115": {
                "pattern": "mov ram[reg[{ptr:token}] + {offset:token} + 8*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 116": {
                "pattern": "mov ram[8*reg[8] + reg[{ptr:token}] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 117": {
                "pattern": "mov ram[8*reg[8] + {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 118": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}] + 8*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 119": {
                "pattern": "mov ram[{offset:token} + 8*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 120": {
                "pattern": "mov ram[reg[{ptr:token}] + reg[8] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 121": {
                "pattern": "mov ram[reg[{ptr:token}] + {offset:token} + reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 122": {
                "pattern": "mov ram[reg[8] + reg[{ptr:token}] + {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 123": {
                "pattern": "mov ram[reg[8] + {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 124": {
                "pattern": "mov ram[{offset:token} + reg[{ptr:token}] + reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 125": {
                "pattern": "mov ram[{offset:token} + reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "offset"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 126": {
                "pattern": "mov ram[reg[{ptr:token}] + 0*reg[8]], reg[{dst:token}]",
                "process": {
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 127": {
                "pattern": "mov ram[0*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 128": {
                "pattern": "mov ram[reg[{ptr:token}] + 1*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 129": {
                "pattern": "mov ram[1*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 130": {
                "pattern": "mov ram[reg[{ptr:token}] + 2*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 131": {
                "pattern": "mov ram[2*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 132": {
                "pattern": "mov ram[reg[{ptr:token}] + 4*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 133": {
                "pattern": "mov ram[4*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 134": {
                "pattern": "mov ram[reg[{ptr:token}] + 8*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 135": {
                "pattern": "mov ram[8*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 136": {
                "pattern": "mov ram[reg[{ptr:token}] + reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 137": {
                "pattern": "mov ram[reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 138": {
                "pattern": "mov ram[0*reg[8]], reg[{dst:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 139": {
                "pattern": "mov ram[1*reg[8]], reg[{dst:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 140": {
                "pattern": "mov ram[2*reg[8]], reg[{dst:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 141": {
                "pattern": "mov ram[4*reg[8]], reg[{dst:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 142": {
                "pattern": "mov ram[8*reg[8]], reg[{dst:token}]",
                "process": {
                    "ptr": "0",
                    "offset": "0"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 143": {
                "pattern": "mov ram[ reg[{ptr:token}] + 0*reg[8] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 144": {
                "pattern": "mov ram[ reg[{ptr:token}] - {offset:token} + 0*reg[8]], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 145": {
                "pattern": "mov ram[ 0*reg[8] + reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 146": {
                "pattern": "mov ram[ 0*reg[8] - {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 147": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}] + 0*reg[8]], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load imm macro 148": {
                "pattern": "mov ram[- {offset:token} + 0*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 149": {
                "pattern": "mov ram[ reg[{ptr:token}] + 1*reg[8] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 150": {
                "pattern": "mov ram[ reg[{ptr:token}] - {offset:token} + 1*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 151": {
                "pattern": "mov ram[ 1*reg[8] + reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 152": {
                "pattern": "mov ram[ 1*reg[8] - {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 153": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}] + 1*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 154": {
                "pattern": "mov ram[- {offset:token} + 1*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 155": {
                "pattern": "mov ram[ reg[{ptr:token}] + 2*reg[8] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 156": {
                "pattern": "mov ram[ reg[{ptr:token}] - {offset:token} + 2*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 157": {
                "pattern": "mov ram[ 2*reg[8] + reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 158": {
                "pattern": "mov ram[ 2*reg[8] - {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 159": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}] + 2*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 160": {
                "pattern": "mov ram[- {offset:token} + 2*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "2",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 161": {
                "pattern": "mov ram[ reg[{ptr:token}] + 4*reg[8] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 162": {
                "pattern": "mov ram[ reg[{ptr:token}] - {offset:token} + 4*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 163": {
                "pattern": "mov ram[ 4*reg[8] + reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 164": {
                "pattern": "mov ram[ 4*reg[8] - {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 165": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}] + 4*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 166": {
                "pattern": "mov ram[- {offset:token} + 4*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "4",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 167": {
                "pattern": "mov ram[ reg[{ptr:token}] + 8*reg[8] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 168": {
                "pattern": "mov ram[ reg[{ptr:token}] - {offset:token} + 8*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 169": {
                "pattern": "mov ram[ 8*reg[8] + reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 170": {
                "pattern": "mov ram[ 8*reg[8] - {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 171": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}] + 8*reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 172": {
                "pattern": "mov ram[- {offset:token} + 8*reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "8",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 173": {
                "pattern": "mov ram[ reg[{ptr:token}] + reg[8] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 174": {
                "pattern": "mov ram[ reg[{ptr:token}] - {offset:token} + reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 175": {
                "pattern": "mov ram[ reg[8] + reg[{ptr:token}] - {offset:token}], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 176": {
                "pattern": "mov ram[ reg[8] - {offset:token} + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 177": {
                "pattern": "mov ram[- {offset:token} + reg[{ptr:token}] + reg[8]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "load lsh macro 178": {
                "pattern": "mov ram[- {offset:token} + reg[8] + reg[{ptr:token}]], reg[{dst:token}]",
                "process": {
                    "lsh": "1",
                    "offset": "-int(offset)"
                },
                "expansion": [
                    "mov ram[reg[{ptr}] + {lsh}*reg[8] + {offset}], reg[{dst}]"
                ]
            },
            "store index 0": {
                "pattern": "mov ram[reg[{ptr:token}] + 0*reg[8]+{offset:token}], reg[{dst:token}]",
                "process": {},
                "expansion": [
                    "mov ram[reg[{ptr}] + {offset}], reg[{dst}]"
                ]
            },
            "load index 0": {
                "pattern": "mov reg[{dst:token}], ram[reg[{ptr:token}]+0*reg[8] + {offset:token}]",
                "process": {},
                "expansion": [
                    "mov reg[{dst}], ram[reg[{ptr}] + {offset}]"
                ]
            }
        },
        "SCHEMATIC": {
            "blank": "potados_blank.schem",
            "high": "minecraft:netherite_block",
            "low": "minecraft:redstone_block",
            "layout": {
                "offset": [
                    0,
                    0,
                    0
                ],
                "stride": [
                    0,
                    0,
                    6
                ],
                "size": 32,
                "layout": {
                    "offset": [
                        0,
                        0,
                        0
                    ],
                    "stride": [
                        3,
                        0,
                        0
                    ],
                    "size": 32,
                    "layout": {
                        "offset": [
                            0,
                            0,
                            0
                        ],
                        "stride": [
                            0,
                            2,
                            0
                        ],
                        "size": 22,
                        "layout": null
                    }
                }
            }
        }
    }
}